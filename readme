# python >=3.10, SQLAlchemy >=2.0
import enum
from datetime import datetime
from typing import Optional

import sqlalchemy as sa
from sqlalchemy import (
    DDL,
    BigInteger,
    Boolean,
    CheckConstraint,
    Date,
    DateTime,
    ForeignKey,
    Index,
    Integer,
    String,
    UniqueConstraint,
)
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, declarative_base, mapped_column, relationship

Base = declarative_base()

# ---------- Enums ----------
class AccountType(str, enum.Enum):
    ASSET = "asset"
    LIABILITY = "liability"
    EQUITY = "equity"
    INCOME = "income"
    EXPENSE = "expense"
    OFFBAL = "offbalance"

class LedgerType(str, enum.Enum):
    GL = "GL"
    PERSONAL = "PERSONAL"

class DC(str, enum.Enum):
    D = "D"
    C = "C"

class JournalStatus(str, enum.Enum):
    POSTED = "posted"
    VOIDED = "voided"

# ---------- Members ----------
class Member(Base):
    __tablename__ = "members"
    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    code: Mapped[str] = mapped_column(String(64), unique=True, nullable=False)
    full_name: Mapped[str] = mapped_column(String(200), nullable=False)
    opened_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, nullable=False)
    status: Mapped[str] = mapped_column(String(24), default="active", nullable=False)

# ---------- Accounts (GL and Personal) ----------
class Account(Base):
    __tablename__ = "accounts"

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    code: Mapped[str] = mapped_column(String(64), unique=True, nullable=False)     # e.g., 1010 or M:123:savings
    name: Mapped[str] = mapped_column(String(160), nullable=False)
    type: Mapped[AccountType] = mapped_column(sa.Enum(AccountType, name="account_type"), nullable=False)
    ledger_type: Mapped[LedgerType] = mapped_column(sa.Enum(LedgerType, name="ledger_type"), nullable=False)
    currency: Mapped[str] = mapped_column(String(3), default="BRL", nullable=False)
    active: Mapped[bool] = mapped_column(Boolean, default=True, nullable=False)

    # Optional structure
    parent_id: Mapped[Optional[int]] = mapped_column(ForeignKey("accounts.id"), nullable=True)
    control_gl_id: Mapped[Optional[int]] = mapped_column(ForeignKey("accounts.id"), nullable=True)
    member_id: Mapped[Optional[int]] = mapped_column(ForeignKey("members.id"), nullable=True)  # required when PERSONAL

    meta: Mapped[dict] = mapped_column(JSONB, default=dict, nullable=False)

    parent = relationship("Account", remote_side=[id], backref="children", foreign_keys=[parent_id])
    control_gl = relationship("Account", remote_side=[id], foreign_keys=[control_gl_id])
    member = relationship("Member", foreign_keys=[member_id])

    __table_args__ = (
        # PERSONAL accounts must have a member_id; GL accounts must not.
        CheckConstraint(
            "(ledger_type = 'PERSONAL' AND member_id IS NOT NULL) OR (ledger_type = 'GL' AND member_id IS NULL)",
            name="personal_requires_member"
        ),
    )

# ---------- Journals (headers) ----------
class Journal(Base):
    __tablename__ = "journals"

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    posted_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, nullable=False)
    value_date: Mapped[Date] = mapped_column(Date, nullable=False, default=lambda: datetime.utcnow().date())
    description: Mapped[str] = mapped_column(String(300), nullable=False)

    # Idempotency to de-dupe retries from your app
    external_src: Mapped[Optional[str]] = mapped_column(String(64))
    external_ref: Mapped[Optional[str]] = mapped_column(String(128))

    posted_by: Mapped[str] = mapped_column(String(80), nullable=False, default="system")
    status: Mapped[JournalStatus] = mapped_column(sa.Enum(JournalStatus, name="journal_status"),
                                                  nullable=False, default=JournalStatus.POSTED)

    # For reversals
    reversal_of: Mapped[Optional[int]] = mapped_column(ForeignKey("journals.id"), nullable=True)

    meta: Mapped[dict] = mapped_column(JSONB, default=dict, nullable=False)

    lines = relationship("JournalLine", back_populates="journal", cascade="all, delete-orphan")

    __table_args__ = (
        # partial unique index (idempotency) â€“ only when both refs are present
        Index(
            "uq_journals_external_src_ref",
            "external_src",
            "external_ref",
            unique=True,
            postgresql_where=sa.and_(sa.text("external_src IS NOT NULL"), sa.text("external_ref IS NOT NULL")),
        ),
    )

# ---------- Journal lines (entries) ----------
class JournalLine(Base):
    __tablename__ = "journal_lines"

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)
    journal_id: Mapped[int] = mapped_column(ForeignKey("journals.id", ondelete="CASCADE"), nullable=False)
    account_id: Mapped[int] = mapped_column(ForeignKey("accounts.id"), nullable=False)
    member_id: Mapped[Optional[int]] = mapped_column(ForeignKey("members.id"), nullable=True)

    # Signed amount model: amount + D/C side
    dc: Mapped[DC] = mapped_column(sa.Enum(DC, name="dc"), nullable=False)
    amount_cents: Mapped[int] = mapped_column(BigInteger, nullable=False)  # > 0, integer minor units

    value_date: Mapped[Date] = mapped_column(Date, nullable=False)  # denormalized for speed
    currency: Mapped[str] = mapped_column(String(3), default="BRL", nullable=False)
    memo: Mapped[Optional[str]] = mapped_column(String(240))
    meta: Mapped[dict] = mapped_column(JSONB, default=dict, nullable=False)

    journal = relationship("Journal", back_populates="lines")
    account = relationship("Account")
    member = relationship("Member")

    __table_args__ = (
        CheckConstraint("amount_cents > 0", name="amount_positive"),
        # Helpful composite indexes for common reads
        Index("ix_jl_account_date", "account_id", "value_date"),
        Index("ix_jl_member_date", "member_id", "value_date"),
        Index("ix_jl_journal", "journal_id"),
    )    member = relationship("Member")

    __table_args__ = (
        CheckConstraint("amount_cents > 0", name="amount_positive"),
        # Helpful composite indexes for common reads
        Index("ix_jl_account_date", "account_id", "value_date"),
        Index("ix_jl_member_date", "member_id", "value_date"),
        Index("ix_jl_journal", "journal_id"),
    )